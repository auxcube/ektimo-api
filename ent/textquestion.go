// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auxcube/ektimo-api/ent/textquestion"
	"github.com/google/uuid"
)

// TextQuestion is the model entity for the TextQuestion schema.
type TextQuestion struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// HumanID holds the value of the "human_id" field.
	HumanID string `json:"human_id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Answer holds the value of the "answer" field.
	Answer string `json:"answer,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TextQuestion) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case textquestion.FieldHumanID, textquestion.FieldText, textquestion.FieldAnswer:
			values[i] = new(sql.NullString)
		case textquestion.FieldCreatedAt, textquestion.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case textquestion.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type TextQuestion", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TextQuestion fields.
func (tq *TextQuestion) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case textquestion.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				tq.ID = *value
			}
		case textquestion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				tq.CreatedAt = value.Time
			}
		case textquestion.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				tq.UpdatedAt = value.Time
			}
		case textquestion.FieldHumanID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field human_id", values[i])
			} else if value.Valid {
				tq.HumanID = value.String
			}
		case textquestion.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				tq.Text = value.String
			}
		case textquestion.FieldAnswer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field answer", values[i])
			} else if value.Valid {
				tq.Answer = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this TextQuestion.
// Note that you need to call TextQuestion.Unwrap() before calling this method if this TextQuestion
// was returned from a transaction, and the transaction was committed or rolled back.
func (tq *TextQuestion) Update() *TextQuestionUpdateOne {
	return (&TextQuestionClient{config: tq.config}).UpdateOne(tq)
}

// Unwrap unwraps the TextQuestion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (tq *TextQuestion) Unwrap() *TextQuestion {
	tx, ok := tq.config.driver.(*txDriver)
	if !ok {
		panic("ent: TextQuestion is not a transactional entity")
	}
	tq.config.driver = tx.drv
	return tq
}

// String implements the fmt.Stringer.
func (tq *TextQuestion) String() string {
	var builder strings.Builder
	builder.WriteString("TextQuestion(")
	builder.WriteString(fmt.Sprintf("id=%v", tq.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(tq.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(tq.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", human_id=")
	builder.WriteString(tq.HumanID)
	builder.WriteString(", text=")
	builder.WriteString(tq.Text)
	builder.WriteString(", answer=")
	builder.WriteString(tq.Answer)
	builder.WriteByte(')')
	return builder.String()
}

// TextQuestions is a parsable slice of TextQuestion.
type TextQuestions []*TextQuestion

func (tq TextQuestions) config(cfg config) {
	for _i := range tq {
		tq[_i].config = cfg
	}
}
